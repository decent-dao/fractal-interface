/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface MemberNFTSingleVotingInterface extends utils.Interface {
  functions: {
    "UsulModule()": FunctionFragment;
    "VOTE_TYPEHASH()": FunctionFragment;
    "addMember(address)": FunctionFragment;
    "finalizeStrategy(uint256)": FunctionFragment;
    "hasVoted(uint256,address)": FunctionFragment;
    "isPassed(uint256)": FunctionFragment;
    "memberCount()": FunctionFragment;
    "members(address)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "proposals(uint256)": FunctionFragment;
    "quorum(uint256)": FunctionFragment;
    "quorumDenominator()": FunctionFragment;
    "quorumNumerator()": FunctionFragment;
    "receiveProposal(bytes)": FunctionFragment;
    "removeMember(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setUp(bytes)": FunctionFragment;
    "setUsul(address)": FunctionFragment;
    "timeLockPeriod()": FunctionFragment;
    "tokenAddress()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateQuorumNumerator(uint256)": FunctionFragment;
    "updateTimeLockPeriod(uint256)": FunctionFragment;
    "updateVotingPeriod(uint256)": FunctionFragment;
    "version()": FunctionFragment;
    "vote(uint256,uint8,bytes)": FunctionFragment;
    "voteSignature(uint256,uint8,bytes,bytes)": FunctionFragment;
    "votingPeriod()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "UsulModule"
      | "VOTE_TYPEHASH"
      | "addMember"
      | "finalizeStrategy"
      | "hasVoted"
      | "isPassed"
      | "memberCount"
      | "members"
      | "name"
      | "owner"
      | "proposals"
      | "quorum"
      | "quorumDenominator"
      | "quorumNumerator"
      | "receiveProposal"
      | "removeMember"
      | "renounceOwnership"
      | "setUp"
      | "setUsul"
      | "timeLockPeriod"
      | "tokenAddress"
      | "transferOwnership"
      | "updateQuorumNumerator"
      | "updateTimeLockPeriod"
      | "updateVotingPeriod"
      | "version"
      | "vote"
      | "voteSignature"
      | "votingPeriod"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "UsulModule",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VOTE_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeStrategy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoted",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPassed",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "memberCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "members",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposals",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "quorum",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "quorumDenominator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "quorumNumerator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "receiveProposal",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUp",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUsul",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "timeLockPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateQuorumNumerator",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateTimeLockPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVotingPeriod",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "voteSignature",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "votingPeriod",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "UsulModule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "VOTE_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "finalizeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasVoted", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isPassed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "memberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "members", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quorum", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "quorumDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "quorumNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "receiveProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setUsul", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "timeLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateQuorumNumerator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateTimeLockPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVotingPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "voteSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "votingPeriod",
    data: BytesLike
  ): Result;

  events: {
    "MemberAdded(address)": EventFragment;
    "MemberRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProposalReceived(uint256,uint256)": EventFragment;
    "QuorumNumeratorUpdated(uint256,uint256)": EventFragment;
    "StrategySetup(address,address)": EventFragment;
    "TimeLockUpdated(uint256,uint256)": EventFragment;
    "UsulSet(address,address)": EventFragment;
    "VoteFinalized(uint256,uint256)": EventFragment;
    "Voted(address,uint256,uint8,uint256)": EventFragment;
    "VotingPeriodUpdated(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "MemberAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MemberRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "QuorumNumeratorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StrategySetup"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TimeLockUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UsulSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VoteFinalized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Voted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VotingPeriodUpdated"): EventFragment;
}

export interface MemberAddedEventObject {
  member: string;
}
export type MemberAddedEvent = TypedEvent<[string], MemberAddedEventObject>;

export type MemberAddedEventFilter = TypedEventFilter<MemberAddedEvent>;

export interface MemberRemovedEventObject {
  member: string;
}
export type MemberRemovedEvent = TypedEvent<[string], MemberRemovedEventObject>;

export type MemberRemovedEventFilter = TypedEventFilter<MemberRemovedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ProposalReceivedEventObject {
  proposalId: BigNumber;
  timestamp: BigNumber;
}
export type ProposalReceivedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProposalReceivedEventObject
>;

export type ProposalReceivedEventFilter =
  TypedEventFilter<ProposalReceivedEvent>;

export interface QuorumNumeratorUpdatedEventObject {
  oldQuorumNumerator: BigNumber;
  newQuorumNumerator: BigNumber;
}
export type QuorumNumeratorUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  QuorumNumeratorUpdatedEventObject
>;

export type QuorumNumeratorUpdatedEventFilter =
  TypedEventFilter<QuorumNumeratorUpdatedEvent>;

export interface StrategySetupEventObject {
  UsulModule: string;
  owner: string;
}
export type StrategySetupEvent = TypedEvent<
  [string, string],
  StrategySetupEventObject
>;

export type StrategySetupEventFilter = TypedEventFilter<StrategySetupEvent>;

export interface TimeLockUpdatedEventObject {
  previousTimeLock: BigNumber;
  newTimeLockPeriod: BigNumber;
}
export type TimeLockUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  TimeLockUpdatedEventObject
>;

export type TimeLockUpdatedEventFilter = TypedEventFilter<TimeLockUpdatedEvent>;

export interface UsulSetEventObject {
  previousUsul: string;
  newUsul: string;
}
export type UsulSetEvent = TypedEvent<[string, string], UsulSetEventObject>;

export type UsulSetEventFilter = TypedEventFilter<UsulSetEvent>;

export interface VoteFinalizedEventObject {
  proposalId: BigNumber;
  timestamp: BigNumber;
}
export type VoteFinalizedEvent = TypedEvent<
  [BigNumber, BigNumber],
  VoteFinalizedEventObject
>;

export type VoteFinalizedEventFilter = TypedEventFilter<VoteFinalizedEvent>;

export interface VotedEventObject {
  voter: string;
  proposalId: BigNumber;
  support: number;
  weight: BigNumber;
}
export type VotedEvent = TypedEvent<
  [string, BigNumber, number, BigNumber],
  VotedEventObject
>;

export type VotedEventFilter = TypedEventFilter<VotedEvent>;

export interface VotingPeriodUpdatedEventObject {
  previousVotingPeriod: BigNumber;
  newVotingPeriod: BigNumber;
}
export type VotingPeriodUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  VotingPeriodUpdatedEventObject
>;

export type VotingPeriodUpdatedEventFilter =
  TypedEventFilter<VotingPeriodUpdatedEvent>;

export interface MemberNFTSingleVoting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MemberNFTSingleVotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    UsulModule(overrides?: CallOverrides): Promise<[string]>;

    VOTE_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    addMember(
      member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    finalizeStrategy(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasVoted(
      proposalId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isPassed(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    memberCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    members(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        yesVotes: BigNumber;
        noVotes: BigNumber;
        abstainVotes: BigNumber;
        deadline: BigNumber;
        startBlock: BigNumber;
      }
    >;

    quorum(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    quorumDenominator(overrides?: CallOverrides): Promise<[BigNumber]>;

    quorumNumerator(overrides?: CallOverrides): Promise<[BigNumber]>;

    receiveProposal(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeMember(
      member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUp(
      initParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUsul(
      _Usul: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    timeLockPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;

    tokenAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateQuorumNumerator(
      newQuorumNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateTimeLockPeriod(
      newTimeLockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateVotingPeriod(
      newPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    version(overrides?: CallOverrides): Promise<[string]>;

    vote(
      proposalId: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<BigNumberish>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    voteSignature(
      proposalId: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  UsulModule(overrides?: CallOverrides): Promise<string>;

  VOTE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  addMember(
    member: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  finalizeStrategy(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasVoted(
    proposalId: PromiseOrValue<BigNumberish>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isPassed(
    proposalId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  memberCount(overrides?: CallOverrides): Promise<BigNumber>;

  members(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  proposals(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      yesVotes: BigNumber;
      noVotes: BigNumber;
      abstainVotes: BigNumber;
      deadline: BigNumber;
      startBlock: BigNumber;
    }
  >;

  quorum(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  quorumDenominator(overrides?: CallOverrides): Promise<BigNumber>;

  quorumNumerator(overrides?: CallOverrides): Promise<BigNumber>;

  receiveProposal(
    data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeMember(
    member: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUp(
    initParams: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUsul(
    _Usul: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  timeLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  tokenAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateQuorumNumerator(
    newQuorumNumerator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateTimeLockPeriod(
    newTimeLockPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateVotingPeriod(
    newPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  version(overrides?: CallOverrides): Promise<string>;

  vote(
    proposalId: PromiseOrValue<BigNumberish>,
    support: PromiseOrValue<BigNumberish>,
    extraData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  voteSignature(
    proposalId: PromiseOrValue<BigNumberish>,
    support: PromiseOrValue<BigNumberish>,
    signature: PromiseOrValue<BytesLike>,
    extraData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    UsulModule(overrides?: CallOverrides): Promise<string>;

    VOTE_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    addMember(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    finalizeStrategy(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasVoted(
      proposalId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isPassed(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    memberCount(overrides?: CallOverrides): Promise<BigNumber>;

    members(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        yesVotes: BigNumber;
        noVotes: BigNumber;
        abstainVotes: BigNumber;
        deadline: BigNumber;
        startBlock: BigNumber;
      }
    >;

    quorum(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorumDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    quorumNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    receiveProposal(
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeMember(
      member: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setUp(
      initParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUsul(
      _Usul: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    timeLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateQuorumNumerator(
      newQuorumNumerator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateTimeLockPeriod(
      newTimeLockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVotingPeriod(
      newPeriod: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    version(overrides?: CallOverrides): Promise<string>;

    vote(
      proposalId: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<BigNumberish>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    voteSignature(
      proposalId: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "MemberAdded(address)"(member?: null): MemberAddedEventFilter;
    MemberAdded(member?: null): MemberAddedEventFilter;

    "MemberRemoved(address)"(member?: null): MemberRemovedEventFilter;
    MemberRemoved(member?: null): MemberRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ProposalReceived(uint256,uint256)"(
      proposalId?: null,
      timestamp?: null
    ): ProposalReceivedEventFilter;
    ProposalReceived(
      proposalId?: null,
      timestamp?: null
    ): ProposalReceivedEventFilter;

    "QuorumNumeratorUpdated(uint256,uint256)"(
      oldQuorumNumerator?: null,
      newQuorumNumerator?: null
    ): QuorumNumeratorUpdatedEventFilter;
    QuorumNumeratorUpdated(
      oldQuorumNumerator?: null,
      newQuorumNumerator?: null
    ): QuorumNumeratorUpdatedEventFilter;

    "StrategySetup(address,address)"(
      UsulModule?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): StrategySetupEventFilter;
    StrategySetup(
      UsulModule?: PromiseOrValue<string> | null,
      owner?: PromiseOrValue<string> | null
    ): StrategySetupEventFilter;

    "TimeLockUpdated(uint256,uint256)"(
      previousTimeLock?: null,
      newTimeLockPeriod?: null
    ): TimeLockUpdatedEventFilter;
    TimeLockUpdated(
      previousTimeLock?: null,
      newTimeLockPeriod?: null
    ): TimeLockUpdatedEventFilter;

    "UsulSet(address,address)"(
      previousUsul?: PromiseOrValue<string> | null,
      newUsul?: PromiseOrValue<string> | null
    ): UsulSetEventFilter;
    UsulSet(
      previousUsul?: PromiseOrValue<string> | null,
      newUsul?: PromiseOrValue<string> | null
    ): UsulSetEventFilter;

    "VoteFinalized(uint256,uint256)"(
      proposalId?: null,
      timestamp?: null
    ): VoteFinalizedEventFilter;
    VoteFinalized(
      proposalId?: null,
      timestamp?: null
    ): VoteFinalizedEventFilter;

    "Voted(address,uint256,uint8,uint256)"(
      voter?: null,
      proposalId?: null,
      support?: null,
      weight?: null
    ): VotedEventFilter;
    Voted(
      voter?: null,
      proposalId?: null,
      support?: null,
      weight?: null
    ): VotedEventFilter;

    "VotingPeriodUpdated(uint256,uint256)"(
      previousVotingPeriod?: null,
      newVotingPeriod?: null
    ): VotingPeriodUpdatedEventFilter;
    VotingPeriodUpdated(
      previousVotingPeriod?: null,
      newVotingPeriod?: null
    ): VotingPeriodUpdatedEventFilter;
  };

  estimateGas: {
    UsulModule(overrides?: CallOverrides): Promise<BigNumber>;

    VOTE_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    addMember(
      member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    finalizeStrategy(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasVoted(
      proposalId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPassed(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    memberCount(overrides?: CallOverrides): Promise<BigNumber>;

    members(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorum(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quorumDenominator(overrides?: CallOverrides): Promise<BigNumber>;

    quorumNumerator(overrides?: CallOverrides): Promise<BigNumber>;

    receiveProposal(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeMember(
      member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUp(
      initParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUsul(
      _Usul: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    timeLockPeriod(overrides?: CallOverrides): Promise<BigNumber>;

    tokenAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateQuorumNumerator(
      newQuorumNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateTimeLockPeriod(
      newTimeLockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateVotingPeriod(
      newPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;

    vote(
      proposalId: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<BigNumberish>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    voteSignature(
      proposalId: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    votingPeriod(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    UsulModule(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VOTE_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addMember(
      member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    finalizeStrategy(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasVoted(
      proposalId: PromiseOrValue<BigNumberish>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPassed(
      proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    memberCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    members(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposals(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorum(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quorumDenominator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    quorumNumerator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveProposal(
      data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeMember(
      member: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      initParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUsul(
      _Usul: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    timeLockPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateQuorumNumerator(
      newQuorumNumerator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateTimeLockPeriod(
      newTimeLockPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateVotingPeriod(
      newPeriod: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vote(
      proposalId: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<BigNumberish>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    voteSignature(
      proposalId: PromiseOrValue<BigNumberish>,
      support: PromiseOrValue<BigNumberish>,
      signature: PromiseOrValue<BytesLike>,
      extraData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    votingPeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
