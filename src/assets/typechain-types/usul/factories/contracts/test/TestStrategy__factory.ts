/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestStrategy,
  TestStrategyInterface,
} from "../../../contracts/test/TestStrategy";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_UsulModule",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_timeLockedPeriod",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "UsulModule",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "proposalId",
        type: "uint256",
      },
    ],
    name: "finalizeStrategy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "receiveProposal",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "timeLockPeriod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516105d73803806105d7833981810160405281019061003291906100aa565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550806001819055505050610159565b60008151905061008f8161012b565b92915050565b6000815190506100a481610142565b92915050565b600080604083850312156100c1576100c0610126565b5b60006100cf85828601610080565b92505060206100e085828601610095565b9150509250929050565b60006100f5826100fc565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600080fd5b610134816100ea565b811461013f57600080fd5b50565b61014b8161011c565b811461015657600080fd5b50565b61046f806101686000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063224f326314610051578063747691df1461006d57806378446bc11461008b57806379bfb089146100a9575b600080fd5b61006b60048036038101906100669190610209565b6100c5565b005b6100756100c8565b604051610082919061029d565b60405180910390f35b6100936100ec565b6040516100a091906102b8565b60405180910390f35b6100c360048036038101906100be9190610252565b6100f2565b005b50565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60015481565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634fd61348826001546040518363ffffffff1660e01b815260040161014f9291906102d3565b600060405180830381600087803b15801561016957600080fd5b505af115801561017d573d6000803e3d6000fd5b5050505050565b600061019761019284610321565b6102fc565b9050828152602081018484840111156101b3576101b2610402565b5b6101be84828561038e565b509392505050565b600082601f8301126101db576101da6103fd565b5b81356101eb848260208601610184565b91505092915050565b60008135905061020381610422565b92915050565b60006020828403121561021f5761021e61040c565b5b600082013567ffffffffffffffff81111561023d5761023c610407565b5b610249848285016101c6565b91505092915050565b6000602082840312156102685761026761040c565b5b6000610276848285016101f4565b91505092915050565b61028881610352565b82525050565b61029781610384565b82525050565b60006020820190506102b2600083018461027f565b92915050565b60006020820190506102cd600083018461028e565b92915050565b60006040820190506102e8600083018561028e565b6102f5602083018461028e565b9392505050565b6000610306610317565b9050610312828261039d565b919050565b6000604051905090565b600067ffffffffffffffff82111561033c5761033b6103ce565b5b61034582610411565b9050602081019050919050565b600061035d82610364565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b6103a682610411565b810181811067ffffffffffffffff821117156103c5576103c46103ce565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b61042b81610384565b811461043657600080fd5b5056fea264697066735822122099f49924bfc113444b70c391604dbab4cc57213bc90ab17c03558acd989a260364736f6c63430008060033";

type TestStrategyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestStrategyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestStrategy__factory extends ContractFactory {
  constructor(...args: TestStrategyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _UsulModule: PromiseOrValue<string>,
    _timeLockedPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestStrategy> {
    return super.deploy(
      _UsulModule,
      _timeLockedPeriod,
      overrides || {}
    ) as Promise<TestStrategy>;
  }
  override getDeployTransaction(
    _UsulModule: PromiseOrValue<string>,
    _timeLockedPeriod: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _UsulModule,
      _timeLockedPeriod,
      overrides || {}
    );
  }
  override attach(address: string): TestStrategy {
    return super.attach(address) as TestStrategy;
  }
  override connect(signer: Signer): TestStrategy__factory {
    return super.connect(signer) as TestStrategy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestStrategyInterface {
    return new utils.Interface(_abi) as TestStrategyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestStrategy {
    return new Contract(address, _abi, signerOrProvider) as TestStrategy;
  }
}
