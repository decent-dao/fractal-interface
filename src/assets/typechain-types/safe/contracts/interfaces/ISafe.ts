/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface ISafeInterface extends utils.Interface {
  functions: {
    "VERSION()": FunctionFragment;
    "addOwnerWithThreshold(address,uint256)": FunctionFragment;
    "approveHash(bytes32)": FunctionFragment;
    "approvedHashes(address,bytes32)": FunctionFragment;
    "changeThreshold(uint256)": FunctionFragment;
    "checkNSignatures(address,bytes32,bytes,uint256)": FunctionFragment;
    "checkSignatures(bytes32,bytes,bytes)": FunctionFragment;
    "checkSignatures(bytes32,bytes)": FunctionFragment;
    "disableModule(address,address)": FunctionFragment;
    "domainSeparator()": FunctionFragment;
    "enableModule(address)": FunctionFragment;
    "execTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)": FunctionFragment;
    "execTransactionFromModule(address,uint256,bytes,uint8)": FunctionFragment;
    "execTransactionFromModuleReturnData(address,uint256,bytes,uint8)": FunctionFragment;
    "getModulesPaginated(address,uint256)": FunctionFragment;
    "getOwners()": FunctionFragment;
    "getThreshold()": FunctionFragment;
    "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,uint256)": FunctionFragment;
    "isModuleEnabled(address)": FunctionFragment;
    "isOwner(address)": FunctionFragment;
    "nonce()": FunctionFragment;
    "removeOwner(address,address,uint256)": FunctionFragment;
    "setFallbackHandler(address)": FunctionFragment;
    "setGuard(address)": FunctionFragment;
    "setup(address[],uint256,address,bytes,address,address,uint256,address)": FunctionFragment;
    "signedMessages(bytes32)": FunctionFragment;
    "swapOwner(address,address,address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "VERSION"
      | "addOwnerWithThreshold"
      | "approveHash"
      | "approvedHashes"
      | "changeThreshold"
      | "checkNSignatures"
      | "checkSignatures(bytes32,bytes,bytes)"
      | "checkSignatures(bytes32,bytes)"
      | "disableModule"
      | "domainSeparator"
      | "enableModule"
      | "execTransaction"
      | "execTransactionFromModule"
      | "execTransactionFromModuleReturnData"
      | "getModulesPaginated"
      | "getOwners"
      | "getThreshold"
      | "getTransactionHash"
      | "isModuleEnabled"
      | "isOwner"
      | "nonce"
      | "removeOwner"
      | "setFallbackHandler"
      | "setGuard"
      | "setup"
      | "signedMessages"
      | "swapOwner"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addOwnerWithThreshold",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "approveHash",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approvedHashes",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "changeThreshold",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkNSignatures",
    values: [string, BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignatures(bytes32,bytes,bytes)",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "checkSignatures(bytes32,bytes)",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "disableModule",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "domainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableModule",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransaction",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModule",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "execTransactionFromModuleReturnData",
    values: [string, BigNumberish, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getModulesPaginated",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getOwners", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionHash",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isModuleEnabled",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isOwner", values: [string]): string;
  encodeFunctionData(functionFragment: "nonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFallbackHandler",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setGuard", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setup",
    values: [
      string[],
      BigNumberish,
      string,
      BytesLike,
      string,
      string,
      BigNumberish,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "signedMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swapOwner",
    values: [string, string, string]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addOwnerWithThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approveHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvedHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "changeThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkNSignatures",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSignatures(bytes32,bytes,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkSignatures(bytes32,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "domainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "execTransactionFromModuleReturnData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModulesPaginated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwners", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isModuleEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFallbackHandler",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setGuard", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setup", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "signedMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swapOwner", data: BytesLike): Result;

  events: {
    "AddedOwner(address)": EventFragment;
    "ApproveHash(bytes32,address)": EventFragment;
    "ChangedFallbackHandler(address)": EventFragment;
    "ChangedGuard(address)": EventFragment;
    "ChangedThreshold(uint256)": EventFragment;
    "DisabledModule(address)": EventFragment;
    "EnabledModule(address)": EventFragment;
    "ExecutionFailure(bytes32,uint256)": EventFragment;
    "ExecutionFromModuleFailure(address)": EventFragment;
    "ExecutionFromModuleSuccess(address)": EventFragment;
    "ExecutionSuccess(bytes32,uint256)": EventFragment;
    "RemovedOwner(address)": EventFragment;
    "SafeSetup(address,address[],uint256,address,address)": EventFragment;
    "SignMsg(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddedOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApproveHash"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedFallbackHandler"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedGuard"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ChangedThreshold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DisabledModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnabledModule"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFromModuleFailure"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionFromModuleSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutionSuccess"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RemovedOwner"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SafeSetup"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SignMsg"): EventFragment;
}

export interface AddedOwnerEventObject {
  owner: string;
}
export type AddedOwnerEvent = TypedEvent<[string], AddedOwnerEventObject>;

export type AddedOwnerEventFilter = TypedEventFilter<AddedOwnerEvent>;

export interface ApproveHashEventObject {
  approvedHash: string;
  owner: string;
}
export type ApproveHashEvent = TypedEvent<
  [string, string],
  ApproveHashEventObject
>;

export type ApproveHashEventFilter = TypedEventFilter<ApproveHashEvent>;

export interface ChangedFallbackHandlerEventObject {
  handler: string;
}
export type ChangedFallbackHandlerEvent = TypedEvent<
  [string],
  ChangedFallbackHandlerEventObject
>;

export type ChangedFallbackHandlerEventFilter =
  TypedEventFilter<ChangedFallbackHandlerEvent>;

export interface ChangedGuardEventObject {
  guard: string;
}
export type ChangedGuardEvent = TypedEvent<[string], ChangedGuardEventObject>;

export type ChangedGuardEventFilter = TypedEventFilter<ChangedGuardEvent>;

export interface ChangedThresholdEventObject {
  threshold: BigNumber;
}
export type ChangedThresholdEvent = TypedEvent<
  [BigNumber],
  ChangedThresholdEventObject
>;

export type ChangedThresholdEventFilter =
  TypedEventFilter<ChangedThresholdEvent>;

export interface DisabledModuleEventObject {
  module: string;
}
export type DisabledModuleEvent = TypedEvent<
  [string],
  DisabledModuleEventObject
>;

export type DisabledModuleEventFilter = TypedEventFilter<DisabledModuleEvent>;

export interface EnabledModuleEventObject {
  module: string;
}
export type EnabledModuleEvent = TypedEvent<[string], EnabledModuleEventObject>;

export type EnabledModuleEventFilter = TypedEventFilter<EnabledModuleEvent>;

export interface ExecutionFailureEventObject {
  txHash: string;
  payment: BigNumber;
}
export type ExecutionFailureEvent = TypedEvent<
  [string, BigNumber],
  ExecutionFailureEventObject
>;

export type ExecutionFailureEventFilter =
  TypedEventFilter<ExecutionFailureEvent>;

export interface ExecutionFromModuleFailureEventObject {
  module: string;
}
export type ExecutionFromModuleFailureEvent = TypedEvent<
  [string],
  ExecutionFromModuleFailureEventObject
>;

export type ExecutionFromModuleFailureEventFilter =
  TypedEventFilter<ExecutionFromModuleFailureEvent>;

export interface ExecutionFromModuleSuccessEventObject {
  module: string;
}
export type ExecutionFromModuleSuccessEvent = TypedEvent<
  [string],
  ExecutionFromModuleSuccessEventObject
>;

export type ExecutionFromModuleSuccessEventFilter =
  TypedEventFilter<ExecutionFromModuleSuccessEvent>;

export interface ExecutionSuccessEventObject {
  txHash: string;
  payment: BigNumber;
}
export type ExecutionSuccessEvent = TypedEvent<
  [string, BigNumber],
  ExecutionSuccessEventObject
>;

export type ExecutionSuccessEventFilter =
  TypedEventFilter<ExecutionSuccessEvent>;

export interface RemovedOwnerEventObject {
  owner: string;
}
export type RemovedOwnerEvent = TypedEvent<[string], RemovedOwnerEventObject>;

export type RemovedOwnerEventFilter = TypedEventFilter<RemovedOwnerEvent>;

export interface SafeSetupEventObject {
  initiator: string;
  owners: string[];
  threshold: BigNumber;
  initializer: string;
  fallbackHandler: string;
}
export type SafeSetupEvent = TypedEvent<
  [string, string[], BigNumber, string, string],
  SafeSetupEventObject
>;

export type SafeSetupEventFilter = TypedEventFilter<SafeSetupEvent>;

export interface SignMsgEventObject {
  msgHash: string;
}
export type SignMsgEvent = TypedEvent<[string], SignMsgEventObject>;

export type SignMsgEventFilter = TypedEventFilter<SignMsgEvent>;

export interface ISafe extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ISafeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    VERSION(overrides?: CallOverrides): Promise<[string]>;

    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approveHash(
      hashToApprove: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    approvedHashes(
      owner: string,
      messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    checkNSignatures(
      executor: string,
      dataHash: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "checkSignatures(bytes32,bytes,bytes)"(
      dataHash: BytesLike,
      arg1: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    "checkSignatures(bytes32,bytes)"(
      dataHash: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<[void]>;

    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<[string]>;

    enableModule(
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<ContractTransaction>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    getOwners(overrides?: CallOverrides): Promise<[string[]]>;

    getThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<[boolean]>;

    nonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setFallbackHandler(
      handler: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setGuard(
      guard: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    signedMessages(
      messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  VERSION(overrides?: CallOverrides): Promise<string>;

  addOwnerWithThreshold(
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approveHash(
    hashToApprove: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  approvedHashes(
    owner: string,
    messageHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeThreshold(
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  checkNSignatures(
    executor: string,
    dataHash: BytesLike,
    signatures: BytesLike,
    requiredSignatures: BigNumberish,
    overrides?: CallOverrides
  ): Promise<void>;

  "checkSignatures(bytes32,bytes,bytes)"(
    dataHash: BytesLike,
    arg1: BytesLike,
    signatures: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  "checkSignatures(bytes32,bytes)"(
    dataHash: BytesLike,
    signatures: BytesLike,
    overrides?: CallOverrides
  ): Promise<void>;

  disableModule(
    prevModule: string,
    module: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  domainSeparator(overrides?: CallOverrides): Promise<string>;

  enableModule(
    module: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  execTransaction(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    signatures: BytesLike,
    overrides?: PayableOverrides & { from?: string }
  ): Promise<ContractTransaction>;

  execTransactionFromModule(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  execTransactionFromModuleReturnData(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getModulesPaginated(
    start: string,
    pageSize: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string[], string] & { array: string[]; next: string }>;

  getOwners(overrides?: CallOverrides): Promise<string[]>;

  getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  getTransactionHash(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    _nonce: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  isModuleEnabled(module: string, overrides?: CallOverrides): Promise<boolean>;

  isOwner(owner: string, overrides?: CallOverrides): Promise<boolean>;

  nonce(overrides?: CallOverrides): Promise<BigNumber>;

  removeOwner(
    prevOwner: string,
    owner: string,
    _threshold: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setFallbackHandler(
    handler: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setGuard(
    guard: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setup(
    _owners: string[],
    _threshold: BigNumberish,
    to: string,
    data: BytesLike,
    fallbackHandler: string,
    paymentToken: string,
    payment: BigNumberish,
    paymentReceiver: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  signedMessages(
    messageHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  swapOwner(
    prevOwner: string,
    oldOwner: string,
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    VERSION(overrides?: CallOverrides): Promise<string>;

    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    approveHash(
      hashToApprove: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    approvedHashes(
      owner: string,
      messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeThreshold(
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    checkNSignatures(
      executor: string,
      dataHash: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "checkSignatures(bytes32,bytes,bytes)"(
      dataHash: BytesLike,
      arg1: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "checkSignatures(bytes32,bytes)"(
      dataHash: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    disableModule(
      prevModule: string,
      module: string,
      overrides?: CallOverrides
    ): Promise<void>;

    domainSeparator(overrides?: CallOverrides): Promise<string>;

    enableModule(module: string, overrides?: CallOverrides): Promise<void>;

    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean, string] & { success: boolean; returnData: string }>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string[], string] & { array: string[]; next: string }>;

    getOwners(overrides?: CallOverrides): Promise<string[]>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<boolean>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setFallbackHandler(
      handler: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setGuard(guard: string, overrides?: CallOverrides): Promise<void>;

    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    signedMessages(
      messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddedOwner(address)"(owner?: string | null): AddedOwnerEventFilter;
    AddedOwner(owner?: string | null): AddedOwnerEventFilter;

    "ApproveHash(bytes32,address)"(
      approvedHash?: BytesLike | null,
      owner?: string | null
    ): ApproveHashEventFilter;
    ApproveHash(
      approvedHash?: BytesLike | null,
      owner?: string | null
    ): ApproveHashEventFilter;

    "ChangedFallbackHandler(address)"(
      handler?: string | null
    ): ChangedFallbackHandlerEventFilter;
    ChangedFallbackHandler(
      handler?: string | null
    ): ChangedFallbackHandlerEventFilter;

    "ChangedGuard(address)"(guard?: string | null): ChangedGuardEventFilter;
    ChangedGuard(guard?: string | null): ChangedGuardEventFilter;

    "ChangedThreshold(uint256)"(threshold?: null): ChangedThresholdEventFilter;
    ChangedThreshold(threshold?: null): ChangedThresholdEventFilter;

    "DisabledModule(address)"(
      module?: string | null
    ): DisabledModuleEventFilter;
    DisabledModule(module?: string | null): DisabledModuleEventFilter;

    "EnabledModule(address)"(module?: string | null): EnabledModuleEventFilter;
    EnabledModule(module?: string | null): EnabledModuleEventFilter;

    "ExecutionFailure(bytes32,uint256)"(
      txHash?: BytesLike | null,
      payment?: null
    ): ExecutionFailureEventFilter;
    ExecutionFailure(
      txHash?: BytesLike | null,
      payment?: null
    ): ExecutionFailureEventFilter;

    "ExecutionFromModuleFailure(address)"(
      module?: string | null
    ): ExecutionFromModuleFailureEventFilter;
    ExecutionFromModuleFailure(
      module?: string | null
    ): ExecutionFromModuleFailureEventFilter;

    "ExecutionFromModuleSuccess(address)"(
      module?: string | null
    ): ExecutionFromModuleSuccessEventFilter;
    ExecutionFromModuleSuccess(
      module?: string | null
    ): ExecutionFromModuleSuccessEventFilter;

    "ExecutionSuccess(bytes32,uint256)"(
      txHash?: BytesLike | null,
      payment?: null
    ): ExecutionSuccessEventFilter;
    ExecutionSuccess(
      txHash?: BytesLike | null,
      payment?: null
    ): ExecutionSuccessEventFilter;

    "RemovedOwner(address)"(owner?: string | null): RemovedOwnerEventFilter;
    RemovedOwner(owner?: string | null): RemovedOwnerEventFilter;

    "SafeSetup(address,address[],uint256,address,address)"(
      initiator?: string | null,
      owners?: null,
      threshold?: null,
      initializer?: null,
      fallbackHandler?: null
    ): SafeSetupEventFilter;
    SafeSetup(
      initiator?: string | null,
      owners?: null,
      threshold?: null,
      initializer?: null,
      fallbackHandler?: null
    ): SafeSetupEventFilter;

    "SignMsg(bytes32)"(msgHash?: BytesLike | null): SignMsgEventFilter;
    SignMsg(msgHash?: BytesLike | null): SignMsgEventFilter;
  };

  estimateGas: {
    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approveHash(
      hashToApprove: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    approvedHashes(
      owner: string,
      messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    checkNSignatures(
      executor: string,
      dataHash: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkSignatures(bytes32,bytes,bytes)"(
      dataHash: BytesLike,
      arg1: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "checkSignatures(bytes32,bytes)"(
      dataHash: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    domainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    enableModule(
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<BigNumber>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwners(overrides?: CallOverrides): Promise<BigNumber>;

    getThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isOwner(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    nonce(overrides?: CallOverrides): Promise<BigNumber>;

    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setFallbackHandler(
      handler: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setGuard(
      guard: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    signedMessages(
      messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addOwnerWithThreshold(
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approveHash(
      hashToApprove: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    approvedHashes(
      owner: string,
      messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeThreshold(
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    checkNSignatures(
      executor: string,
      dataHash: BytesLike,
      signatures: BytesLike,
      requiredSignatures: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkSignatures(bytes32,bytes,bytes)"(
      dataHash: BytesLike,
      arg1: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "checkSignatures(bytes32,bytes)"(
      dataHash: BytesLike,
      signatures: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    disableModule(
      prevModule: string,
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    domainSeparator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enableModule(
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    execTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      overrides?: PayableOverrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    execTransactionFromModule(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    execTransactionFromModuleReturnData(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getModulesPaginated(
      start: string,
      pageSize: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwners(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTransactionHash(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      _nonce: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isModuleEnabled(
      module: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isOwner(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeOwner(
      prevOwner: string,
      owner: string,
      _threshold: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setFallbackHandler(
      handler: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setGuard(
      guard: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setup(
      _owners: string[],
      _threshold: BigNumberish,
      to: string,
      data: BytesLike,
      fallbackHandler: string,
      paymentToken: string,
      payment: BigNumberish,
      paymentReceiver: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    signedMessages(
      messageHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swapOwner(
      prevOwner: string,
      oldOwner: string,
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
