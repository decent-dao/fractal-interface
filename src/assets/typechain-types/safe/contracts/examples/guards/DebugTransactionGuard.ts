/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export interface DebugTransactionGuardInterface extends utils.Interface {
  functions: {
    "checkAfterExecution(bytes32,bool)": FunctionFragment;
    "checkModuleTransaction(address,uint256,bytes,uint8,address)": FunctionFragment;
    "checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "txNonces(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkAfterExecution"
      | "checkModuleTransaction"
      | "checkTransaction"
      | "supportsInterface"
      | "txNonces"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkAfterExecution",
    values: [BytesLike, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "checkModuleTransaction",
    values: [string, BigNumberish, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkTransaction",
    values: [
      string,
      BigNumberish,
      BytesLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      string,
      string,
      BytesLike,
      string
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "txNonces", values: [BytesLike]): string;

  decodeFunctionResult(
    functionFragment: "checkAfterExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkModuleTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "txNonces", data: BytesLike): Result;

  events: {
    "GasUsage(address,bytes32,uint256,bool)": EventFragment;
    "ModuleTransasctionDetails(bytes32,address,uint256,bytes,uint8,address)": EventFragment;
    "TransactionDetails(address,bytes32,address,uint256,bytes,uint8,uint256,bool,uint256,bytes,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GasUsage"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ModuleTransasctionDetails"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionDetails"): EventFragment;
}

export interface GasUsageEventObject {
  safe: string;
  txHash: string;
  nonce: BigNumber;
  success: boolean;
}
export type GasUsageEvent = TypedEvent<
  [string, string, BigNumber, boolean],
  GasUsageEventObject
>;

export type GasUsageEventFilter = TypedEventFilter<GasUsageEvent>;

export interface ModuleTransasctionDetailsEventObject {
  txHash: string;
  to: string;
  value: BigNumber;
  data: string;
  operation: number;
  module: string;
}
export type ModuleTransasctionDetailsEvent = TypedEvent<
  [string, string, BigNumber, string, number, string],
  ModuleTransasctionDetailsEventObject
>;

export type ModuleTransasctionDetailsEventFilter =
  TypedEventFilter<ModuleTransasctionDetailsEvent>;

export interface TransactionDetailsEventObject {
  safe: string;
  txHash: string;
  to: string;
  value: BigNumber;
  data: string;
  operation: number;
  safeTxGas: BigNumber;
  usesRefund: boolean;
  nonce: BigNumber;
  signatures: string;
  executor: string;
}
export type TransactionDetailsEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    string,
    number,
    BigNumber,
    boolean,
    BigNumber,
    string,
    string
  ],
  TransactionDetailsEventObject
>;

export type TransactionDetailsEventFilter =
  TypedEventFilter<TransactionDetailsEvent>;

export interface DebugTransactionGuard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DebugTransactionGuardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkAfterExecution(
      txHash: BytesLike,
      success: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    checkModuleTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    checkTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      executor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    txNonces(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  checkAfterExecution(
    txHash: BytesLike,
    success: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  checkModuleTransaction(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    module: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  checkTransaction(
    to: string,
    value: BigNumberish,
    data: BytesLike,
    operation: BigNumberish,
    safeTxGas: BigNumberish,
    baseGas: BigNumberish,
    gasPrice: BigNumberish,
    gasToken: string,
    refundReceiver: string,
    signatures: BytesLike,
    executor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  txNonces(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    checkAfterExecution(
      txHash: BytesLike,
      success: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    checkModuleTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      module: string,
      overrides?: CallOverrides
    ): Promise<string>;

    checkTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      executor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    txNonces(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "GasUsage(address,bytes32,uint256,bool)"(
      safe?: string | null,
      txHash?: BytesLike | null,
      nonce?: BigNumberish | null,
      success?: null
    ): GasUsageEventFilter;
    GasUsage(
      safe?: string | null,
      txHash?: BytesLike | null,
      nonce?: BigNumberish | null,
      success?: null
    ): GasUsageEventFilter;

    "ModuleTransasctionDetails(bytes32,address,uint256,bytes,uint8,address)"(
      txHash?: BytesLike | null,
      to?: null,
      value?: null,
      data?: null,
      operation?: null,
      module?: null
    ): ModuleTransasctionDetailsEventFilter;
    ModuleTransasctionDetails(
      txHash?: BytesLike | null,
      to?: null,
      value?: null,
      data?: null,
      operation?: null,
      module?: null
    ): ModuleTransasctionDetailsEventFilter;

    "TransactionDetails(address,bytes32,address,uint256,bytes,uint8,uint256,bool,uint256,bytes,address)"(
      safe?: string | null,
      txHash?: BytesLike | null,
      to?: null,
      value?: null,
      data?: null,
      operation?: null,
      safeTxGas?: null,
      usesRefund?: null,
      nonce?: null,
      signatures?: null,
      executor?: null
    ): TransactionDetailsEventFilter;
    TransactionDetails(
      safe?: string | null,
      txHash?: BytesLike | null,
      to?: null,
      value?: null,
      data?: null,
      operation?: null,
      safeTxGas?: null,
      usesRefund?: null,
      nonce?: null,
      signatures?: null,
      executor?: null
    ): TransactionDetailsEventFilter;
  };

  estimateGas: {
    checkAfterExecution(
      txHash: BytesLike,
      success: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    checkModuleTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    checkTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      executor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    txNonces(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    checkAfterExecution(
      txHash: BytesLike,
      success: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    checkModuleTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      module: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    checkTransaction(
      to: string,
      value: BigNumberish,
      data: BytesLike,
      operation: BigNumberish,
      safeTxGas: BigNumberish,
      baseGas: BigNumberish,
      gasPrice: BigNumberish,
      gasToken: string,
      refundReceiver: string,
      signatures: BytesLike,
      executor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    txNonces(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
