/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ClaimSubsidiary,
  ClaimSubsidiaryInterface,
} from "../../contracts/ClaimSubsidiary";

const _abi = [
  {
    inputs: [],
    name: "AllocationClaimed",
    type: "error",
  },
  {
    inputs: [],
    name: "NoAllocation",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "pToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "cToken",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "pAllocation",
        type: "uint256",
      },
    ],
    name: "SnapAdded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "pToken",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "cToken",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "claimer",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "SnapClaimed",
    type: "event",
  },
  {
    inputs: [],
    name: "cToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "claimer",
        type: "address",
      },
    ],
    name: "calculateClaimAmount",
    outputs: [
      {
        internalType: "uint256",
        name: "cTokenAllocation",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "claimer",
        type: "address",
      },
    ],
    name: "claimSnap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pAllocation",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pToken",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "initializeParams",
        type: "bytes",
      },
    ],
    name: "setUp",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "snapId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d28806100206000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80638da5cb5b116100665780638da5cb5b1461011a578063977477281461012b578063a40d1cbd14610134578063a4f9edbf14610147578063f2fde38b1461015a57600080fd5b80634175428c146100a3578063466bbe81146100b857806358a06f07146100d457806369e527da146100ff578063715018a614610112575b600080fd5b6100b66100b1366004610a67565b61016d565b005b6100c160685481565b6040519081526020015b60405180910390f35b6066546100e7906001600160a01b031681565b6040516001600160a01b0390911681526020016100cb565b6065546100e7906001600160a01b031681565b6100b661021c565b6033546001600160a01b03166100e7565b6100c160675481565b6100c1610142366004610a67565b610230565b6100b6610155366004610a9a565b610363565b6100b6610168366004610a67565b6104ca565b600061017882610230565b90508060000361019b57604051632fc532ad60e11b815260040160405180910390fd5b6001600160a01b038083166000908152606960205260409020805460ff191660011790556065546101ce91168383610543565b6065546066546040518381526001600160a01b038581169381169216907f14598a46cf7d6b47beae636c879badc9ad239ea17ee5252fe6a365694a9c35969060200160405180910390a45050565b61022461059a565b61022e60006105f4565b565b6001600160a01b03811660009081526069602052604081205460ff1661035a57606654606754604051630981b24d60e41b81526001600160a01b039092169163981b24d0916102859160040190815260200190565b602060405180830381865afa1580156102a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c69190610b4b565b60685460665460675460405163277166bf60e11b81526001600160a01b0387811660048301526024820192909252911690634ee2cd7e90604401602060405180830381865afa15801561031d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103419190610b4b565b61034b9190610b64565b6103559190610b91565b61035d565b60005b92915050565b600054610100900460ff16158080156103835750600054600160ff909116105b8061039d5750303b15801561039d575060005460ff166001145b6104055760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b6000805460ff191660011790558015610428576000805461ff0019166101001790555b610430610646565b6000806000808580602001905181019061044a9190610bb3565b606580546001600160a01b0319166001600160a01b0384161790559296509094509250905061047b84848484610675565b505050505080156104c6576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b6104d261059a565b6001600160a01b0381166105375760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103fc565b610540816105f4565b50565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663a9059cbb60e01b1790526105959084906107cd565b505050565b6033546001600160a01b0316331461022e5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103fc565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600054610100900460ff1661066d5760405162461bcd60e51b81526004016103fc90610c06565b61022e61089f565b6040516323b872dd60e01b81526001600160a01b03858116600483015230602483015260448201839052600091908416906323b872dd906064016020604051808303816000875af11580156106ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f29190610c51565b50836001600160a01b031663d1dc72a36040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107579190610b4b565b606680546001600160a01b0319166001600160a01b03878116918217909255606783905560688590556040805191825291861660208201529081018490529091507f53c4c896b07481b6e7f9a43867bc6e836fd59da1ac604caedb1c097ce8e89bd59060600160405180910390a1949350505050565b6000610822826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108cf9092919063ffffffff16565b80519091501561059557808060200190518101906108409190610c51565b6105955760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103fc565b600054610100900460ff166108c65760405162461bcd60e51b81526004016103fc90610c06565b61022e336105f4565b60606108de84846000856108e8565b90505b9392505050565b6060824710156109495760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016103fc565b6001600160a01b0385163b6109a05760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103fc565b600080866001600160a01b031685876040516109bc9190610ca3565b60006040518083038185875af1925050503d80600081146109f9576040519150601f19603f3d011682016040523d82523d6000602084013e6109fe565b606091505b5091509150610a0e828286610a19565b979650505050505050565b60608315610a285750816108e1565b825115610a385782518084602001fd5b8160405162461bcd60e51b81526004016103fc9190610cbf565b6001600160a01b038116811461054057600080fd5b600060208284031215610a7957600080fd5b81356108e181610a52565b634e487b7160e01b600052604160045260246000fd5b600060208284031215610aac57600080fd5b813567ffffffffffffffff80821115610ac457600080fd5b818401915084601f830112610ad857600080fd5b813581811115610aea57610aea610a84565b604051601f8201601f19908116603f01168101908382118183101715610b1257610b12610a84565b81604052828152876020848701011115610b2b57600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208284031215610b5d57600080fd5b5051919050565b6000816000190483118215151615610b8c57634e487b7160e01b600052601160045260246000fd5b500290565b600082610bae57634e487b7160e01b600052601260045260246000fd5b500490565b60008060008060808587031215610bc957600080fd5b8451610bd481610a52565b6020860151909450610be581610a52565b6040860151909350610bf681610a52565b6060959095015193969295505050565b6020808252602b908201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960408201526a6e697469616c697a696e6760a81b606082015260800190565b600060208284031215610c6357600080fd5b815180151581146108e157600080fd5b60005b83811015610c8e578181015183820152602001610c76565b83811115610c9d576000848401525b50505050565b60008251610cb5818460208701610c73565b9190910192915050565b6020815260008251806020840152610cde816040850160208701610c73565b601f01601f1916919091016040019291505056fea2646970667358221220fbad88f6ad3b45eb98163b9df7b84f54ae30b4cb60b416da824ff4e315d7674864736f6c634300080d0033";

type ClaimSubsidiaryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ClaimSubsidiaryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ClaimSubsidiary__factory extends ContractFactory {
  constructor(...args: ClaimSubsidiaryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ClaimSubsidiary> {
    return super.deploy(overrides || {}) as Promise<ClaimSubsidiary>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ClaimSubsidiary {
    return super.attach(address) as ClaimSubsidiary;
  }
  override connect(signer: Signer): ClaimSubsidiary__factory {
    return super.connect(signer) as ClaimSubsidiary__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ClaimSubsidiaryInterface {
    return new utils.Interface(_abi) as ClaimSubsidiaryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ClaimSubsidiary {
    return new Contract(address, _abi, signerOrProvider) as ClaimSubsidiary;
  }
}
