/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type {
  ICallbackGnosis,
  ICallbackGnosisInterface,
} from "../../../contracts/interfaces/ICallbackGnosis";

const _abi = [
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_targets",
        type: "address[]",
      },
      {
        internalType: "bytes[]",
        name: "_txs",
        type: "bytes[]",
      },
      {
        internalType: "address",
        name: "_proxy",
        type: "address",
      },
    ],
    name: "multiTx",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract GnosisSafeProxy",
        name: "proxy",
        type: "address",
      },
      {
        internalType: "address",
        name: "_singleton",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "initializer",
        type: "bytes",
      },
      {
        internalType: "uint256",
        name: "saltNonce",
        type: "uint256",
      },
    ],
    name: "proxyCreated",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class ICallbackGnosis__factory {
  static readonly abi = _abi;
  static createInterface(): ICallbackGnosisInterface {
    return new utils.Interface(_abi) as ICallbackGnosisInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ICallbackGnosis {
    return new Contract(address, _abi, signerOrProvider) as ICallbackGnosis;
  }
}
