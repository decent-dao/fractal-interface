/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  FractalNameRegistry,
  FractalNameRegistryInterface,
} from "../../contracts/FractalNameRegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "daoAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "daoName",
        type: "string",
      },
    ],
    name: "FractalNameUpdated",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
    ],
    name: "updateDAOName",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101db806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063ad25ee4a14610030575b600080fd5b61004361003e36600461009f565b610045565b005b336001600160a01b03167f3c7e9162ed121fd2c775c8c39886daeaede693a6e24ac0fa81e50c47833a9e088260405161007e9190610150565b60405180910390a250565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156100b157600080fd5b813567ffffffffffffffff808211156100c957600080fd5b818401915084601f8301126100dd57600080fd5b8135818111156100ef576100ef610089565b604051601f8201601f19908116603f0116810190838211818310171561011757610117610089565b8160405282815287602084870101111561013057600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b8181101561017d57858101830151858201604001528201610161565b8181111561018f576000604083870101525b50601f01601f191692909201604001939250505056fea2646970667358221220ed2348379b33280c2c401c5faae7c82436b9f355dddf5902bb0552137745fc2564736f6c634300080d0033";

type FractalNameRegistryConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FractalNameRegistryConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FractalNameRegistry__factory extends ContractFactory {
  constructor(...args: FractalNameRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<FractalNameRegistry> {
    return super.deploy(overrides || {}) as Promise<FractalNameRegistry>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): FractalNameRegistry {
    return super.attach(address) as FractalNameRegistry;
  }
  override connect(signer: Signer): FractalNameRegistry__factory {
    return super.connect(signer) as FractalNameRegistry__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FractalNameRegistryInterface {
    return new utils.Interface(_abi) as FractalNameRegistryInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FractalNameRegistry {
    return new Contract(address, _abi, signerOrProvider) as FractalNameRegistry;
  }
}
