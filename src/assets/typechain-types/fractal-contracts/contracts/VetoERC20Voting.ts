/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface VetoERC20VotingInterface extends utils.Interface {
  functions: {
    "castFreezeVote()": FunctionFragment;
    "castVetoVote(bytes32,bool)": FunctionFragment;
    "defrost()": FunctionFragment;
    "freezeBlockDuration()": FunctionFragment;
    "freezeProposalBlockDuration()": FunctionFragment;
    "freezeProposalCreatedBlock()": FunctionFragment;
    "freezeProposalVoteCount()": FunctionFragment;
    "freezeVotesThreshold()": FunctionFragment;
    "getIsVetoed(bytes32)": FunctionFragment;
    "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address)": FunctionFragment;
    "isFrozen()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setUp(bytes)": FunctionFragment;
    "transactionVetoVotes(bytes32)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateFreezeBlockDuration(uint256)": FunctionFragment;
    "updateFreezeProposalBlockDuration(uint256)": FunctionFragment;
    "updateFreezeVotesThreshold(uint256)": FunctionFragment;
    "updateVetoVotesThreshold(uint256)": FunctionFragment;
    "userHasFreezeVoted(address,uint256)": FunctionFragment;
    "userHasVoted(address,bytes32)": FunctionFragment;
    "vetoGuard()": FunctionFragment;
    "vetoVotesThreshold()": FunctionFragment;
    "votesToken()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "castFreezeVote"
      | "castVetoVote"
      | "defrost"
      | "freezeBlockDuration"
      | "freezeProposalBlockDuration"
      | "freezeProposalCreatedBlock"
      | "freezeProposalVoteCount"
      | "freezeVotesThreshold"
      | "getIsVetoed"
      | "getTransactionHash"
      | "isFrozen"
      | "owner"
      | "renounceOwnership"
      | "setUp"
      | "transactionVetoVotes"
      | "transferOwnership"
      | "updateFreezeBlockDuration"
      | "updateFreezeProposalBlockDuration"
      | "updateFreezeVotesThreshold"
      | "updateVetoVotesThreshold"
      | "userHasFreezeVoted"
      | "userHasVoted"
      | "vetoGuard"
      | "vetoVotesThreshold"
      | "votesToken"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "castFreezeVote",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "castVetoVote",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(functionFragment: "defrost", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "freezeBlockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freezeProposalBlockDuration",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freezeProposalCreatedBlock",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freezeProposalVoteCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "freezeVotesThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getIsVetoed",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionHash",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "isFrozen", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUp",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transactionVetoVotes",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFreezeBlockDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFreezeProposalBlockDuration",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateFreezeVotesThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateVetoVotesThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasFreezeVoted",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "userHasVoted",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "vetoGuard", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vetoVotesThreshold",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "votesToken",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "castFreezeVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "castVetoVote",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "defrost", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "freezeBlockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeProposalBlockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeProposalCreatedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeProposalVoteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "freezeVotesThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getIsVetoed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFrozen", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transactionVetoVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFreezeBlockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFreezeProposalBlockDuration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateFreezeVotesThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateVetoVotesThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasFreezeVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userHasVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vetoGuard", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vetoVotesThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "votesToken", data: BytesLike): Result;

  events: {
    "FreezeProposalCreated(address)": EventFragment;
    "FreezeVoteCast(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "VetoVoteCast(address,bytes32,uint256,bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "FreezeProposalCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FreezeVoteCast"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VetoVoteCast"): EventFragment;
}

export interface FreezeProposalCreatedEventObject {
  creator: string;
}
export type FreezeProposalCreatedEvent = TypedEvent<
  [string],
  FreezeProposalCreatedEventObject
>;

export type FreezeProposalCreatedEventFilter =
  TypedEventFilter<FreezeProposalCreatedEvent>;

export interface FreezeVoteCastEventObject {
  voter: string;
  votesCast: BigNumber;
}
export type FreezeVoteCastEvent = TypedEvent<
  [string, BigNumber],
  FreezeVoteCastEventObject
>;

export type FreezeVoteCastEventFilter = TypedEventFilter<FreezeVoteCastEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface VetoVoteCastEventObject {
  voter: string;
  transactionHash: string;
  votesCast: BigNumber;
  freeze: boolean;
}
export type VetoVoteCastEvent = TypedEvent<
  [string, string, BigNumber, boolean],
  VetoVoteCastEventObject
>;

export type VetoVoteCastEventFilter = TypedEventFilter<VetoVoteCastEvent>;

export interface VetoERC20Voting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VetoERC20VotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    castFreezeVote(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    castVetoVote(
      _transactionHash: PromiseOrValue<BytesLike>,
      _freeze: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    defrost(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    freezeBlockDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    freezeProposalBlockDuration(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    freezeProposalCreatedBlock(overrides?: CallOverrides): Promise<[BigNumber]>;

    freezeProposalVoteCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    freezeVotesThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    getIsVetoed(
      _transactionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    getTransactionHash(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isFrozen(overrides?: CallOverrides): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUp(
      initializeParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transactionVetoVotes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFreezeBlockDuration(
      _freezeBlockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFreezeProposalBlockDuration(
      _freezeProposalBlockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateFreezeVotesThreshold(
      _freezeVotesThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateVetoVotesThreshold(
      _vetoVotesThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userHasFreezeVoted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userHasVoted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    vetoGuard(overrides?: CallOverrides): Promise<[string]>;

    vetoVotesThreshold(overrides?: CallOverrides): Promise<[BigNumber]>;

    votesToken(overrides?: CallOverrides): Promise<[string]>;
  };

  castFreezeVote(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  castVetoVote(
    _transactionHash: PromiseOrValue<BytesLike>,
    _freeze: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  defrost(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  freezeBlockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  freezeProposalBlockDuration(overrides?: CallOverrides): Promise<BigNumber>;

  freezeProposalCreatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

  freezeProposalVoteCount(overrides?: CallOverrides): Promise<BigNumber>;

  freezeVotesThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  getIsVetoed(
    _transactionHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  getTransactionHash(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operation: PromiseOrValue<BigNumberish>,
    safeTxGas: PromiseOrValue<BigNumberish>,
    baseGas: PromiseOrValue<BigNumberish>,
    gasPrice: PromiseOrValue<BigNumberish>,
    gasToken: PromiseOrValue<string>,
    refundReceiver: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  isFrozen(overrides?: CallOverrides): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUp(
    initializeParams: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transactionVetoVotes(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFreezeBlockDuration(
    _freezeBlockDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFreezeProposalBlockDuration(
    _freezeProposalBlockDuration: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateFreezeVotesThreshold(
    _freezeVotesThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateVetoVotesThreshold(
    _vetoVotesThreshold: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userHasFreezeVoted(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userHasVoted(
    arg0: PromiseOrValue<string>,
    arg1: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  vetoGuard(overrides?: CallOverrides): Promise<string>;

  vetoVotesThreshold(overrides?: CallOverrides): Promise<BigNumber>;

  votesToken(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    castFreezeVote(overrides?: CallOverrides): Promise<void>;

    castVetoVote(
      _transactionHash: PromiseOrValue<BytesLike>,
      _freeze: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    defrost(overrides?: CallOverrides): Promise<void>;

    freezeBlockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    freezeProposalBlockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    freezeProposalCreatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    freezeProposalVoteCount(overrides?: CallOverrides): Promise<BigNumber>;

    freezeVotesThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getIsVetoed(
      _transactionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    getTransactionHash(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    isFrozen(overrides?: CallOverrides): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setUp(
      initializeParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    transactionVetoVotes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFreezeBlockDuration(
      _freezeBlockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFreezeProposalBlockDuration(
      _freezeProposalBlockDuration: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateFreezeVotesThreshold(
      _freezeVotesThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateVetoVotesThreshold(
      _vetoVotesThreshold: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    userHasFreezeVoted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userHasVoted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    vetoGuard(overrides?: CallOverrides): Promise<string>;

    vetoVotesThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    votesToken(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "FreezeProposalCreated(address)"(
      creator?: PromiseOrValue<string> | null
    ): FreezeProposalCreatedEventFilter;
    FreezeProposalCreated(
      creator?: PromiseOrValue<string> | null
    ): FreezeProposalCreatedEventFilter;

    "FreezeVoteCast(address,uint256)"(
      voter?: PromiseOrValue<string> | null,
      votesCast?: null
    ): FreezeVoteCastEventFilter;
    FreezeVoteCast(
      voter?: PromiseOrValue<string> | null,
      votesCast?: null
    ): FreezeVoteCastEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "VetoVoteCast(address,bytes32,uint256,bool)"(
      voter?: PromiseOrValue<string> | null,
      transactionHash?: PromiseOrValue<BytesLike> | null,
      votesCast?: null,
      freeze?: null
    ): VetoVoteCastEventFilter;
    VetoVoteCast(
      voter?: PromiseOrValue<string> | null,
      transactionHash?: PromiseOrValue<BytesLike> | null,
      votesCast?: null,
      freeze?: null
    ): VetoVoteCastEventFilter;
  };

  estimateGas: {
    castFreezeVote(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    castVetoVote(
      _transactionHash: PromiseOrValue<BytesLike>,
      _freeze: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    defrost(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    freezeBlockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    freezeProposalBlockDuration(overrides?: CallOverrides): Promise<BigNumber>;

    freezeProposalCreatedBlock(overrides?: CallOverrides): Promise<BigNumber>;

    freezeProposalVoteCount(overrides?: CallOverrides): Promise<BigNumber>;

    freezeVotesThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getIsVetoed(
      _transactionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransactionHash(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFrozen(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUp(
      initializeParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transactionVetoVotes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFreezeBlockDuration(
      _freezeBlockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFreezeProposalBlockDuration(
      _freezeProposalBlockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateFreezeVotesThreshold(
      _freezeVotesThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateVetoVotesThreshold(
      _vetoVotesThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userHasFreezeVoted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userHasVoted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vetoGuard(overrides?: CallOverrides): Promise<BigNumber>;

    vetoVotesThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    votesToken(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    castFreezeVote(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    castVetoVote(
      _transactionHash: PromiseOrValue<BytesLike>,
      _freeze: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    defrost(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    freezeBlockDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freezeProposalBlockDuration(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freezeProposalCreatedBlock(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freezeProposalVoteCount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    freezeVotesThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getIsVetoed(
      _transactionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransactionHash(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFrozen(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      initializeParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transactionVetoVotes(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFreezeBlockDuration(
      _freezeBlockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFreezeProposalBlockDuration(
      _freezeProposalBlockDuration: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateFreezeVotesThreshold(
      _freezeVotesThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateVetoVotesThreshold(
      _vetoVotesThreshold: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userHasFreezeVoted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userHasVoted(
      arg0: PromiseOrValue<string>,
      arg1: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vetoGuard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    vetoVotesThreshold(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    votesToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
