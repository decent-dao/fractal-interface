/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface VetoGuardInterface extends utils.Interface {
  functions: {
    "checkAfterExecution(bytes32,bool)": FunctionFragment;
    "checkTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes,address)": FunctionFragment;
    "executionDelayBlocks()": FunctionFragment;
    "getTransactionHash(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address)": FunctionFragment;
    "getTransactionQueuedBlock(bytes32)": FunctionFragment;
    "gnosisSafe()": FunctionFragment;
    "owner()": FunctionFragment;
    "queueTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setUp(bytes)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "vetoERC20Voting()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "checkAfterExecution"
      | "checkTransaction"
      | "executionDelayBlocks"
      | "getTransactionHash"
      | "getTransactionQueuedBlock"
      | "gnosisSafe"
      | "owner"
      | "queueTransaction"
      | "renounceOwnership"
      | "setUp"
      | "supportsInterface"
      | "transferOwnership"
      | "vetoERC20Voting"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "checkAfterExecution",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "checkTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executionDelayBlocks",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionHash",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getTransactionQueuedBlock",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "gnosisSafe",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "queueTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setUp",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "vetoERC20Voting",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "checkAfterExecution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executionDelayBlocks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionHash",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTransactionQueuedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gnosisSafe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "queueTransaction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setUp", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "vetoERC20Voting",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "TransactionQueued(address,bytes32,bytes)": EventFragment;
    "VetoGuardSetup(address,uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransactionQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VetoGuardSetup"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface TransactionQueuedEventObject {
  queuer: string;
  transactionHash: string;
  signatures: string;
}
export type TransactionQueuedEvent = TypedEvent<
  [string, string, string],
  TransactionQueuedEventObject
>;

export type TransactionQueuedEventFilter =
  TypedEventFilter<TransactionQueuedEvent>;

export interface VetoGuardSetupEventObject {
  creator: string;
  executionDelayBlocks: BigNumber;
  owner: string;
  vetoERC20Voting: string;
}
export type VetoGuardSetupEvent = TypedEvent<
  [string, BigNumber, string, string],
  VetoGuardSetupEventObject
>;

export type VetoGuardSetupEventFilter = TypedEventFilter<VetoGuardSetupEvent>;

export interface VetoGuard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: VetoGuardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    checkAfterExecution(
      txHash: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    checkTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      arg9: PromiseOrValue<BytesLike>,
      arg10: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[void]>;

    executionDelayBlocks(overrides?: CallOverrides): Promise<[BigNumber]>;

    getTransactionHash(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getTransactionQueuedBlock(
      _transactionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    gnosisSafe(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    queueTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUp(
      initializeParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    vetoERC20Voting(overrides?: CallOverrides): Promise<[string]>;
  };

  checkAfterExecution(
    txHash: PromiseOrValue<BytesLike>,
    success: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<void>;

  checkTransaction(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operation: PromiseOrValue<BigNumberish>,
    safeTxGas: PromiseOrValue<BigNumberish>,
    baseGas: PromiseOrValue<BigNumberish>,
    gasPrice: PromiseOrValue<BigNumberish>,
    gasToken: PromiseOrValue<string>,
    refundReceiver: PromiseOrValue<string>,
    arg9: PromiseOrValue<BytesLike>,
    arg10: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<void>;

  executionDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>;

  getTransactionHash(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operation: PromiseOrValue<BigNumberish>,
    safeTxGas: PromiseOrValue<BigNumberish>,
    baseGas: PromiseOrValue<BigNumberish>,
    gasPrice: PromiseOrValue<BigNumberish>,
    gasToken: PromiseOrValue<string>,
    refundReceiver: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getTransactionQueuedBlock(
    _transactionHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  gnosisSafe(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  queueTransaction(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operation: PromiseOrValue<BigNumberish>,
    safeTxGas: PromiseOrValue<BigNumberish>,
    baseGas: PromiseOrValue<BigNumberish>,
    gasPrice: PromiseOrValue<BigNumberish>,
    gasToken: PromiseOrValue<string>,
    refundReceiver: PromiseOrValue<string>,
    signatures: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUp(
    initializeParams: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  vetoERC20Voting(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    checkAfterExecution(
      txHash: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      arg9: PromiseOrValue<BytesLike>,
      arg10: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    executionDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionHash(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getTransactionQueuedBlock(
      _transactionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gnosisSafe(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    queueTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setUp(
      initializeParams: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    vetoERC20Voting(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "TransactionQueued(address,bytes32,bytes)"(
      queuer?: PromiseOrValue<string> | null,
      transactionHash?: PromiseOrValue<BytesLike> | null,
      signatures?: PromiseOrValue<BytesLike> | null
    ): TransactionQueuedEventFilter;
    TransactionQueued(
      queuer?: PromiseOrValue<string> | null,
      transactionHash?: PromiseOrValue<BytesLike> | null,
      signatures?: PromiseOrValue<BytesLike> | null
    ): TransactionQueuedEventFilter;

    "VetoGuardSetup(address,uint256,address,address)"(
      creator?: null,
      executionDelayBlocks?: null,
      owner?: PromiseOrValue<string> | null,
      vetoERC20Voting?: PromiseOrValue<string> | null
    ): VetoGuardSetupEventFilter;
    VetoGuardSetup(
      creator?: null,
      executionDelayBlocks?: null,
      owner?: PromiseOrValue<string> | null,
      vetoERC20Voting?: PromiseOrValue<string> | null
    ): VetoGuardSetupEventFilter;
  };

  estimateGas: {
    checkAfterExecution(
      txHash: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      arg9: PromiseOrValue<BytesLike>,
      arg10: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executionDelayBlocks(overrides?: CallOverrides): Promise<BigNumber>;

    getTransactionHash(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTransactionQueuedBlock(
      _transactionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gnosisSafe(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    queueTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUp(
      initializeParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    vetoERC20Voting(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    checkAfterExecution(
      txHash: PromiseOrValue<BytesLike>,
      success: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      arg9: PromiseOrValue<BytesLike>,
      arg10: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executionDelayBlocks(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransactionHash(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTransactionQueuedBlock(
      _transactionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gnosisSafe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queueTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUp(
      initializeParams: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    vetoERC20Voting(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
