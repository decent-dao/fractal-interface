/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IVetoGuardInterface extends utils.Interface {
  functions: {
    "getTransactionQueuedBlock(bytes32)": FunctionFragment;
    "queueTransaction(address,uint256,bytes,uint8,uint256,uint256,uint256,address,address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "getTransactionQueuedBlock" | "queueTransaction"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getTransactionQueuedBlock",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "queueTransaction",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "getTransactionQueuedBlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "queueTransaction",
    data: BytesLike
  ): Result;

  events: {
    "TransactionQueued(address,bytes32,bytes)": EventFragment;
    "VetoGuardSetup(address,uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TransactionQueued"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VetoGuardSetup"): EventFragment;
}

export interface TransactionQueuedEventObject {
  queuer: string;
  transactionHash: string;
  signatures: string;
}
export type TransactionQueuedEvent = TypedEvent<
  [string, string, string],
  TransactionQueuedEventObject
>;

export type TransactionQueuedEventFilter =
  TypedEventFilter<TransactionQueuedEvent>;

export interface VetoGuardSetupEventObject {
  creator: string;
  executionDelayBlocks: BigNumber;
  owner: string;
  vetoERC20Voting: string;
}
export type VetoGuardSetupEvent = TypedEvent<
  [string, BigNumber, string, string],
  VetoGuardSetupEventObject
>;

export type VetoGuardSetupEventFilter = TypedEventFilter<VetoGuardSetupEvent>;

export interface IVetoGuard extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IVetoGuardInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getTransactionQueuedBlock(
      _transactionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    queueTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  getTransactionQueuedBlock(
    _transactionHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  queueTransaction(
    to: PromiseOrValue<string>,
    value: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    operation: PromiseOrValue<BigNumberish>,
    safeTxGas: PromiseOrValue<BigNumberish>,
    baseGas: PromiseOrValue<BigNumberish>,
    gasPrice: PromiseOrValue<BigNumberish>,
    gasToken: PromiseOrValue<string>,
    refundReceiver: PromiseOrValue<string>,
    signatures: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getTransactionQueuedBlock(
      _transactionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queueTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "TransactionQueued(address,bytes32,bytes)"(
      queuer?: PromiseOrValue<string> | null,
      transactionHash?: PromiseOrValue<BytesLike> | null,
      signatures?: PromiseOrValue<BytesLike> | null
    ): TransactionQueuedEventFilter;
    TransactionQueued(
      queuer?: PromiseOrValue<string> | null,
      transactionHash?: PromiseOrValue<BytesLike> | null,
      signatures?: PromiseOrValue<BytesLike> | null
    ): TransactionQueuedEventFilter;

    "VetoGuardSetup(address,uint256,address,address)"(
      creator?: null,
      executionDelayBlocks?: null,
      owner?: PromiseOrValue<string> | null,
      vetoERC20Voting?: PromiseOrValue<string> | null
    ): VetoGuardSetupEventFilter;
    VetoGuardSetup(
      creator?: null,
      executionDelayBlocks?: null,
      owner?: PromiseOrValue<string> | null,
      vetoERC20Voting?: PromiseOrValue<string> | null
    ): VetoGuardSetupEventFilter;
  };

  estimateGas: {
    getTransactionQueuedBlock(
      _transactionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    queueTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getTransactionQueuedBlock(
      _transactionHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    queueTransaction(
      to: PromiseOrValue<string>,
      value: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      operation: PromiseOrValue<BigNumberish>,
      safeTxGas: PromiseOrValue<BigNumberish>,
      baseGas: PromiseOrValue<BigNumberish>,
      gasPrice: PromiseOrValue<BigNumberish>,
      gasToken: PromiseOrValue<string>,
      refundReceiver: PromiseOrValue<string>,
      signatures: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
