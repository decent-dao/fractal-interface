/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IFractalModuleInterface extends utils.Interface {
  functions: {
    "addControllers(address[])": FunctionFragment;
    "execTx(bytes)": FunctionFragment;
    "removeControllers(address[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "addControllers" | "execTx" | "removeControllers"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addControllers",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "execTx",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeControllers",
    values: [PromiseOrValue<string>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addControllers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "execTx", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeControllers",
    data: BytesLike
  ): Result;

  events: {
    "ControllersAdded(address[])": EventFragment;
    "ControllersRemoved(address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ControllersAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ControllersRemoved"): EventFragment;
}

export interface ControllersAddedEventObject {
  controllers: string[];
}
export type ControllersAddedEvent = TypedEvent<
  [string[]],
  ControllersAddedEventObject
>;

export type ControllersAddedEventFilter =
  TypedEventFilter<ControllersAddedEvent>;

export interface ControllersRemovedEventObject {
  controllers: string[];
}
export type ControllersRemovedEvent = TypedEvent<
  [string[]],
  ControllersRemovedEventObject
>;

export type ControllersRemovedEventFilter =
  TypedEventFilter<ControllersRemovedEvent>;

export interface IFractalModule extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFractalModuleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addControllers(
      _controllers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    execTx(
      execTxData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeControllers(
      _controllers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addControllers(
    _controllers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  execTx(
    execTxData: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeControllers(
    _controllers: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addControllers(
      _controllers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    execTx(
      execTxData: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeControllers(
      _controllers: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ControllersAdded(address[])"(
      controllers?: null
    ): ControllersAddedEventFilter;
    ControllersAdded(controllers?: null): ControllersAddedEventFilter;

    "ControllersRemoved(address[])"(
      controllers?: null
    ): ControllersRemovedEventFilter;
    ControllersRemoved(controllers?: null): ControllersRemovedEventFilter;
  };

  estimateGas: {
    addControllers(
      _controllers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    execTx(
      execTxData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeControllers(
      _controllers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addControllers(
      _controllers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    execTx(
      execTxData: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeControllers(
      _controllers: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
