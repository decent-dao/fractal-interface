/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ITokenClaimInterface extends utils.Interface {
  functions: {
    "claimToken(address)": FunctionFragment;
    "getClaimAmount(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic: "claimToken" | "getClaimAmount"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "claimToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getClaimAmount",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "claimToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getClaimAmount",
    data: BytesLike
  ): Result;

  events: {
    "TokenClaimCreated(address,address,uint256,uint256)": EventFragment;
    "TokenClaimed(address,address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "TokenClaimCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenClaimed"): EventFragment;
}

export interface TokenClaimCreatedEventObject {
  parentToken: string;
  childToken: string;
  parentAllocation: BigNumber;
  snapshotId: BigNumber;
}
export type TokenClaimCreatedEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  TokenClaimCreatedEventObject
>;

export type TokenClaimCreatedEventFilter =
  TypedEventFilter<TokenClaimCreatedEvent>;

export interface TokenClaimedEventObject {
  pToken: string;
  cToken: string;
  claimer: string;
  amount: BigNumber;
}
export type TokenClaimedEvent = TypedEvent<
  [string, string, string, BigNumber],
  TokenClaimedEventObject
>;

export type TokenClaimedEventFilter = TypedEventFilter<TokenClaimedEvent>;

export interface ITokenClaim extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITokenClaimInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    claimToken(
      claimer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getClaimAmount(
      claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  claimToken(
    claimer: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getClaimAmount(
    claimer: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    claimToken(
      claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getClaimAmount(
      claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "TokenClaimCreated(address,address,uint256,uint256)"(
      parentToken?: null,
      childToken?: null,
      parentAllocation?: null,
      snapshotId?: null
    ): TokenClaimCreatedEventFilter;
    TokenClaimCreated(
      parentToken?: null,
      childToken?: null,
      parentAllocation?: null,
      snapshotId?: null
    ): TokenClaimCreatedEventFilter;

    "TokenClaimed(address,address,address,uint256)"(
      pToken?: PromiseOrValue<string> | null,
      cToken?: PromiseOrValue<string> | null,
      claimer?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenClaimedEventFilter;
    TokenClaimed(
      pToken?: PromiseOrValue<string> | null,
      cToken?: PromiseOrValue<string> | null,
      claimer?: PromiseOrValue<string> | null,
      amount?: null
    ): TokenClaimedEventFilter;
  };

  estimateGas: {
    claimToken(
      claimer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getClaimAmount(
      claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimToken(
      claimer: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getClaimAmount(
      claimer: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
