/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LockReleaseInterface extends ethers.utils.Interface {
  functions: {
    "CLOCK_MODE()": FunctionFragment;
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "clock()": FunctionFragment;
    "delegate(address)": FunctionFragment;
    "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "delegates(address)": FunctionFragment;
    "duration()": FunctionFragment;
    "eip712Domain()": FunctionFragment;
    "getBeneficiaries()": FunctionFragment;
    "getPastTotalSupply(uint256)": FunctionFragment;
    "getPastVotes(address,uint256)": FunctionFragment;
    "getPending(address)": FunctionFragment;
    "getReleasable(address)": FunctionFragment;
    "getReleased(address)": FunctionFragment;
    "getTotal(address)": FunctionFragment;
    "getTotalMatured(address)": FunctionFragment;
    "getVotes(address)": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "release()": FunctionFragment;
    "start()": FunctionFragment;
    "token()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CLOCK_MODE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "clock", values?: undefined): string;
  encodeFunctionData(functionFragment: "delegate", values: [string]): string;
  encodeFunctionData(
    functionFragment: "delegateBySig",
    values: [
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "delegates", values: [string]): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "eip712Domain",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBeneficiaries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPastTotalSupply",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPastVotes",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getPending", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getReleasable",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getReleased", values: [string]): string;
  encodeFunctionData(functionFragment: "getTotal", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getTotalMatured",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getVotes", values: [string]): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "release", values?: undefined): string;
  encodeFunctionData(functionFragment: "start", values?: undefined): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "CLOCK_MODE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "clock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "delegateBySig",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "delegates", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "eip712Domain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBeneficiaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastTotalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPastVotes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPending", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReleasable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReleased",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTotal", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalMatured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVotes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "release", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "start", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "DelegateChanged(address,address,address)": EventFragment;
    "DelegateVotesChanged(address,uint256,uint256)": EventFragment;
    "EIP712DomainChanged()": EventFragment;
    "ScheduleStarted(address,address[],uint256[],uint128,uint128)": EventFragment;
    "TokensReleased(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DelegateChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "DelegateVotesChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EIP712DomainChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ScheduleStarted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensReleased"): EventFragment;
}

export type DelegateChangedEvent = TypedEvent<
  [string, string, string] & {
    delegator: string;
    fromDelegate: string;
    toDelegate: string;
  }
>;

export type DelegateVotesChangedEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    delegate: string;
    previousBalance: BigNumber;
    newBalance: BigNumber;
  }
>;

export type EIP712DomainChangedEvent = TypedEvent<[] & {}>;

export type ScheduleStartedEvent = TypedEvent<
  [string, string[], BigNumber[], BigNumber, BigNumber] & {
    token: string;
    beneficiaries: string[];
    amounts: BigNumber[];
    start: BigNumber;
    duration: BigNumber;
  }
>;

export type TokensReleasedEvent = TypedEvent<
  [string, BigNumber] & { beneficiary: string; amount: BigNumber }
>;

export class LockRelease extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LockReleaseInterface;

  functions: {
    CLOCK_MODE(overrides?: CallOverrides): Promise<[string]>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    clock(overrides?: CallOverrides): Promise<[number]>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    delegates(account: string, overrides?: CallOverrides): Promise<[string]>;

    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    getBeneficiaries(overrides?: CallOverrides): Promise<[string[]]>;

    getPastTotalSupply(
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPastVotes(
      _account: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPending(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReleasable(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReleased(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotal(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getTotalMatured(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getVotes(_account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    nonces(owner: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    start(overrides?: CallOverrides): Promise<[BigNumber]>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  CLOCK_MODE(overrides?: CallOverrides): Promise<string>;

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  clock(overrides?: CallOverrides): Promise<number>;

  delegate(
    delegatee: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegateBySig(
    delegatee: string,
    nonce: BigNumberish,
    expiry: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  delegates(account: string, overrides?: CallOverrides): Promise<string>;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  eip712Domain(
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, BigNumber, string, string, BigNumber[]] & {
      fields: string;
      name: string;
      version: string;
      chainId: BigNumber;
      verifyingContract: string;
      salt: string;
      extensions: BigNumber[];
    }
  >;

  getBeneficiaries(overrides?: CallOverrides): Promise<string[]>;

  getPastTotalSupply(
    timepoint: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPastVotes(
    _account: string,
    _blockNumber: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPending(
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReleasable(
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReleased(
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getTotal(_beneficiary: string, overrides?: CallOverrides): Promise<BigNumber>;

  getTotalMatured(
    _beneficiary: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getVotes(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

  nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

  release(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  start(overrides?: CallOverrides): Promise<BigNumber>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    CLOCK_MODE(overrides?: CallOverrides): Promise<string>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    clock(overrides?: CallOverrides): Promise<number>;

    delegate(delegatee: string, overrides?: CallOverrides): Promise<void>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    delegates(account: string, overrides?: CallOverrides): Promise<string>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    eip712Domain(
      overrides?: CallOverrides
    ): Promise<
      [string, string, string, BigNumber, string, string, BigNumber[]] & {
        fields: string;
        name: string;
        version: string;
        chainId: BigNumber;
        verifyingContract: string;
        salt: string;
        extensions: BigNumber[];
      }
    >;

    getBeneficiaries(overrides?: CallOverrides): Promise<string[]>;

    getPastTotalSupply(
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastVotes(
      _account: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPending(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReleasable(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReleased(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotal(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalMatured(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotes(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    release(overrides?: CallOverrides): Promise<void>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "DelegateChanged(address,address,address)"(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { delegator: string; fromDelegate: string; toDelegate: string }
    >;

    DelegateChanged(
      delegator?: string | null,
      fromDelegate?: string | null,
      toDelegate?: string | null
    ): TypedEventFilter<
      [string, string, string],
      { delegator: string; fromDelegate: string; toDelegate: string }
    >;

    "DelegateVotesChanged(address,uint256,uint256)"(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { delegate: string; previousBalance: BigNumber; newBalance: BigNumber }
    >;

    DelegateVotesChanged(
      delegate?: string | null,
      previousBalance?: null,
      newBalance?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { delegate: string; previousBalance: BigNumber; newBalance: BigNumber }
    >;

    "EIP712DomainChanged()"(): TypedEventFilter<[], {}>;

    EIP712DomainChanged(): TypedEventFilter<[], {}>;

    "ScheduleStarted(address,address[],uint256[],uint128,uint128)"(
      token?: null,
      beneficiaries?: null,
      amounts?: null,
      start?: null,
      duration?: null
    ): TypedEventFilter<
      [string, string[], BigNumber[], BigNumber, BigNumber],
      {
        token: string;
        beneficiaries: string[];
        amounts: BigNumber[];
        start: BigNumber;
        duration: BigNumber;
      }
    >;

    ScheduleStarted(
      token?: null,
      beneficiaries?: null,
      amounts?: null,
      start?: null,
      duration?: null
    ): TypedEventFilter<
      [string, string[], BigNumber[], BigNumber, BigNumber],
      {
        token: string;
        beneficiaries: string[];
        amounts: BigNumber[];
        start: BigNumber;
        duration: BigNumber;
      }
    >;

    "TokensReleased(address,uint256)"(
      beneficiary?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; amount: BigNumber }
    >;

    TokensReleased(
      beneficiary?: string | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { beneficiary: string; amount: BigNumber }
    >;
  };

  estimateGas: {
    CLOCK_MODE(overrides?: CallOverrides): Promise<BigNumber>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    clock(overrides?: CallOverrides): Promise<BigNumber>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    delegates(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    eip712Domain(overrides?: CallOverrides): Promise<BigNumber>;

    getBeneficiaries(overrides?: CallOverrides): Promise<BigNumber>;

    getPastTotalSupply(
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPastVotes(
      _account: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPending(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReleasable(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReleased(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotal(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTotalMatured(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getVotes(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    nonces(owner: string, overrides?: CallOverrides): Promise<BigNumber>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    start(overrides?: CallOverrides): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    CLOCK_MODE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    clock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    delegate(
      delegatee: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegateBySig(
      delegatee: string,
      nonce: BigNumberish,
      expiry: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    delegates(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    eip712Domain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBeneficiaries(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPastTotalSupply(
      timepoint: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPastVotes(
      _account: string,
      _blockNumber: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPending(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReleasable(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReleased(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotal(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTotalMatured(
      _beneficiary: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getVotes(
      _account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      owner: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    release(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    start(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
